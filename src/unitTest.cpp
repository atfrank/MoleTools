//Sean M. Law

#include "DTree.hpp"

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cmath>
#include <vector>

void usage(){
  std::cerr << std::endl << std::endl;
  std::cerr << "Usage:   unitTest [-options] <file>" << std::endl;
  std::cerr << "Options: [-format type]" << std::endl;
  std::cerr << "         [-top file] [-prm file]" << std::endl;
  exit(0);
}

int main (int argc, char **argv){


  int i;
  std::string currArg;
  std::vector<std::string> s;

  for (i=1; i<argc; i++){
    currArg=argv[i];
    if (currArg.compare("-h") == 0 || currArg.compare("-help") == 0){
      usage();
    }
    else{

    }
  }

	DTree* root=new DTree; //Keep root for this tree
	DTree* t=root;
	std::vector<std::vector <double> > f;
	std::vector<std::string> tokens;
	std::string delim=":";

/*
	f.resize(3);
	for (unsigned int i=0; i< f.size(); i++){
		f.at(i).resize(3);
		for (unsigned int j=0; j< f.at(i).size(); j++){
			f.at(i).at(j)=(i+1)*(j+1);
//			std::cerr << f.at(i).at(j) << std::endl;
		}
	}
*/

	f.resize(1);
	f.at(0).resize(11);
	f.at(0).at(0)=0.5;
	f.at(0).at(1)=3.5;
	f.at(0).at(2)=4.5;
	f.at(0).at(3)=0.5;
	f.at(0).at(4)=6.0;
	f.at(0).at(5)=5.0;
	f.at(0).at(6)=6.0;
	f.at(0).at(7)=7.0;
	f.at(0).at(8)=10.0;
	f.at(0).at(9)=11.0;
	f.at(0).at(10)=12.0;

	f.at(0).resize(258);
	std::string z;
	z="9999.9,9999.9,9999.9,6.72171,3.8175,3.80055,6.54456,9.77224,13.2304,15.8881,117.823,-154.21,167.275,12.91,10.3146,7.5551,6.07856,7.91315,37.2578,33.722,32.5902,35.8469,38.4176,10.2801,7.66746,4.83501,5.33092,6.71508,34.6899,31.0499,30.111,33.4704,35.8326,10.3567,8.93534,5.48736,5.98705,4.93137,31.7535,28.1192,27.4336,30.9173,33.3699,9999.9,9999.9,9999.9,6.54393,3.26194,3.27228,6.41491,9.75448,12.7374,15.4858,173.317,-124.534,171.122,6.37598,4.79085,5.83109,7.95697,10.829,35.4911,34.1455,31.7838,32.9585,35.8331,7.99287,5.40582,4.64189,5.51845,7.99496,32.8078,31.3745,29.0903,30.4407,33.3342,10.5882,7.7576,5.82854,4.71586,5.92336,30.0069,28.4893,26.2893,27.8133,30.7157,9999.9,9999.9,9999.9,9999.9,3.81108,3.8175,6.52389,9.97158,12.8772,16.4305,123.556,-167.008,9999.9,7.33181,5.62407,5.76231,7.12367,10.4839,40.9897,37.4284,36.2919,39.5307,42.0364,7.79895,6.98833,4.89147,6.12947,8.38574,37.2578,33.722,32.5902,35.8469,38.4176,10.5815,9.12259,5.96595,4.86133,5.79656,34.6899,31.0499,30.111,33.4704,35.8326,9999.9,9999.9,9999.9,9999.9,3.36086,3.26194,6.52311,9.67682,13.0114,15.9768,162.296,-177.345,9999.9,6.44373,5.21252,5.3987,7.73759,10.551,38.6119,37.3405,34.9575,36.0484,38.9281,8.30425,6.37598,4.79085,5.83109,7.95697,35.4911,34.1455,31.7838,32.9585,35.8331,10.2034,7.99287,5.40582,4.64189,5.51845,32.8078,31.3745,29.0903,30.4407,33.3342,9999.9,9999.9,9.89672,6.52389,3.80055,3.80677,6.37765,9.91915,12.3336,15.2818,118.7,-154.406,172.957,5.96595,4.86133,5.79656,7.56102,10.7706,34.6899,31.0499,30.111,33.4704,35.8326,7.02672,6.08897,4.56816,6.24763,8.50418,31.7535,28.1192,27.4336,30.9173,33.3699,10.4769,8.56374,5.80012,4.93142,5.79401,28.9704,25.2461,24.7586,28.3156,30.5228,9999.9,9999.9,9.8076,6.52311,3.27228,3.18882,6.5244,9.53918,12.2926,15.5872,166.288,56.0862,171.478,5.40582,4.64189,5.51845,7.99496,10.3971,32.8078,31.3745,29.0903,30.4407,33.3342,7.7576,5.82854,4.71586,5.92336,7.67906,30.0069,28.4893,26.2893,27.8133,30.7157,10.1816,7.68552,5.26923,4.56633,5.18757,27.902,26.263,24.2107,25.9826,28.8715";
	Misc::splitNum(z,",",f.at(0),false);

//	std::string serialT = "1.0:1 2.0:2 3.0:3 4.0:4 A B 5.0:5 C D 6.0:6 E F 7.0:7 8.0:8 9.0:9 G H 10.0:10 I J 11.0:11 K L";
	std::string serialT = "1.0:1 2.0:2 3.0:3 4.0:4 A B Z 5.0:5 C D 6.0:6 E F 7.0:7 8.0:8 9.0:9 G H 10.0:10 I J 11.0:11 K L";

	serialT="";

	Misc::splitStr(Misc::trim(serialT), " \t", tokens, false);
	t->genDTree(tokens, delim);

	std::cerr << t->getDTreeClass(f.at(0)) << std::endl;

	t->delDTree();

  return 0;
}
